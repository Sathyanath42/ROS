**************************************************************ROS Message

1. The message definition is run through the build system to generate the message in your chosen language.
You can use primitive message types to create a message
You can create a message defintion using other message definition

2. Topics would have only a request message
Services would have a request and a response message.

Note: Easier to create all messages in a single package

Lines to be added to the package.xml file
<build_depend>message_generation</build_depend>
<exec_depend>message_runtime</exec_depend>

Lines to be added in CMakeLists.txt
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  message_generation
)

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs
 )

catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES my_robot_msgs
  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime
#  DEPENDS system_lib
)
 Now we can work on creating the messgae as follows
$ mkdir msg
$ cd msg
$ touch HardwareStatus.msg
$ vim HardwareStatus.msg

Note : Use the msg page in ROS to pick the type of message

**************************************CODE

int64 temperature
bool are_motors_up
string debug_message

*********************************************************************

Add the following lines in CMakeLists.txt for each new message
## Generate messages in the 'msg' folder
add_message_files(
   FILES
   HardwareStatus.msg 
 )

Then run catkin_make on the catkin_ws

You can find the created message at
~/catkin_ws/devel/include/my_robot_msgs$ ls
HardwareStatus.h

***************************************************Using the message in code
We add dependencies in the package.xml as follows:
 <depend>my_robot_msgs</depend>
 
We add dependencies in the CMakeLists.txt as follows:

find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  std_srvs
  rospy_tutorials
  my_robot_msgs
  )

Now we create a node to check the hardware status
$vim hw_status_publisher.py
$chmod +x hw_status_publisher.py
************************************************************CODE

#!/usr/bin/env python

import rospy
from my_robot_msgs.msg import HardwareStatus

if __name__ == '__main__':
    rospy.init_node("hardware_status_publisher")
    
    pub = rospy.Publisher("/my_robot/hardware_status", HardwareStatus, queue_size = 10)
    
    rate = rospy.Rate(5)
    
    while not rospy.is_shutdown():
        msg = HardwareStatus()
        msg.temperature = 45
        msg.are_motors_up = True
        msg.debug_message = "everything is running well"
        pub.publish(msg)
        rate.sleep()
*******************************************************************

$ rosrun my_robot_tutorials hw_status_publisher.py

################## NOTE : $ source .bashrc  (This is needed when adding new dependencies)

$ rostopic echo /my_robot/hardware_status
temperature: 45
are_motors_up: True
debug_message: "everything is running well"



















