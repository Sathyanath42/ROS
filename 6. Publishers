"Node" is the ROS term for an executable that is connected to the ROS network. While a publisher is a ("talker") node which will continually broadcast a message. 
We create a new node in scripts as usual

*********************************************************PYTHON PUBLISHER******************************************************

$touch robot_news_rt.py
$chmod +X robot_news_rt.py (to make it executable)
vim robot_news_rt.py (to edit the file)

**********************************************************CODE

#!/usr/bin/env/python

import rospy

from std_msgs.msg import String 

% We import std_msgs to use the message string which contains a simple string data in it.

if __name__ == '__main__':

rospy.init_node('robot_news_rt')

%This tells rospy the name of the node
%if we add anonymous = True, then the uniqueness of the node is confirmed by adding random numbers at the end of the node.

pub = rospy.Publisher("/robot_news_radio", String, queue_size=10) 

%We create a publisher with a name , a type and a queue size
%Here queue_size acts as a buffer to give time for the subscriber to receive the message

rate = rospy.Rate(2)  #2Hz

%Along with the method sleep(), it offers an easy way to set the desired rate
%WIth an argument of 2, the loop would run 2 times in a second

while not rospy.is_shutdown(): %checking the shutdown flag

msg = String()

msg.data = "Hi, this is your favourite radio"

pub.publish(msg)

rate.sleep()

rospy.loginfo("Node was stopped")

%finally we can also use the try - except form to try the main prog with except for rospy.ROSInterruptException : This catches the exception when cntrl + c is pressed or the node is shutdown.

******************************************************************

Now we will use a functionality called rostopic

$rostopic list

%Will display all the available topics

%In this case it will include robot_news_radio

$rostopic echo /robot_news_radio

%Will allow us to listen to this publisher

Output :

data: "Hi, this is your favourite radio"

*********************************************************C++ publisher*********************************************************

We start off the same way. Creating a node.

So in the src folder of my robot_tutorials

$touch robot_news_rt.cpp

$vim robot_news_rt.cpp

**************************************************CODE

#include <ros/ros.h>

#include <std_msgs/String.h>

int main(int argc, char **argv)

{

ros::init(argc, argv, "robot_news_rt");

ros::NodeHandle nh;

ros::Publisher pub = nh.advertise<std_msgs::String>("/robot_news_radio", 10);

ros::Rate rate(3);

while (ros::ok()){

std_msgs:: String msg;

msg.data = "hey, Sathya here";

pub.publish(msg);

rate.sleep();

}

}

*******************************************************

//The first NodeHandle created will actually do the initialisation of the node, while the last one destructed will cleanup any resources the node was using.
//The advertise function is how you tell ROS that you want to publish on a certain topic. This will include the type of the message (eg string) and the size of our publishing queue(10 is the buffer queue)
//The publish() function is how you send messages. The parameter is the message object, the type of which must agree with the template parameter to the advertise() call.

//ros::ok() will return false in the following cases:

1. A SIGNIT is recieved (cntrl + C)

2. We have been kicked off the network by a node of same name

3. ros:: shutdown () has been called by another part of the application

4. All Ros::NodeHandles have been destroyed

//Then make the above file executable in the CMakeLists.txt file by adding the following lines:

add executable (robot_news_rt sex/robot_news_rt.cpp)

target_link_libraries(robot_news_rt ${catkin_LIBRARIES})

//Run catkin_make and finally launch the file using rosrun as

$rosrun my_robot_tutorials robot_news_rt.py

*************************************************************Notes

1. Note if there are two files of the same name and if the extension isn't given, Ros will run the C++ file
2. ros::spinOnce() is necessary if you have callbacks from a subscriber, so its good practice to always add it.







