Task:

To create a server, service and client as follows:
1. The client will be the battery level in a robot, which alternates between a full state every 7 seconds and an empty state every 3 seconds. The battery will send the request containing this info to the led server via a service called SetLed
2. The led server will recieve the request and change any of its three leds into the state indicated by the battery. If the battery is full it will lit up no leds and if the battery is low it will light up 1 led
3. The service will have the request message made up of an int64 led_number and an int64 led_state while the response will be a boolean Success

*************************************************The Service Messages
~/catkin_ws/src/my_robot_msgs/srv$ vim SetLed.srv 

**********************CODE
int64 led_number
int64 state
---
bool success
~               
************************
Rememeber to include the service in the CMakeLists.txt file

**************************************************The LED server
*********************CODE
#!/usr/bin/env python

import rospy
from my_robot_msgs.srv import SetLed

led_states = [0,0,0]

def callback_set_led(req):
    led_number = req.led_number
    state = req.state
    global led_states

    if (led_number > len(led_states)) or (led_number <= 0):
       return False

    if not (state == 0 or state == 1):
       return False

    led_states[led_number - 1] = state

    return True

if __name__ == '__main__':
    rospy.init_node('led_panel')
    rospy.loginfo("led_panel_server has been created")
    server = rospy.Service("/set_led",SetLed, callback_set_led)
    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
       rospy.loginfo(led_states)
       rate.sleep()

************************************************************
~/catkin_ws/src/my_robot_tutorials/scripts$ pytn led_server.py
[INFO] [1585106795.908311]: led_panel_server has been created
[INFO] [1585106795.911466]: [0, 0, 0]
[INFO] [1585106796.023030]: [0, 0, 0]
[INFO] [1585106796.111869]: [0, 0, 0]

$ rosservice call /set_led "led_number: 2
state: 1" 
success: True
[INFO] [1585106854.415467]: [0, 1, 0]
[INFO] [1585106854.511918]: [0, 1, 0]
[INFO] [1585106854.613556]: [0, 1, 0]
[INFO] [1585106854.715323]: [0, 1, 0]


**************************************************The battery client
******************************CODE
#!/usr/bin/env python

import rospy
from my_robot_msgs.srv import SetLed

def set_led(battery_state):
    rospy.wait_for_service("/set_led")
    try:
        service = rospy.ServiceProxy("/set_led", SetLed)
        state = 0
        if battery_state == 'empty':
           state = 1
        resp = service(1,state)
        rospy.loginfo("set led sucess flag:"+ str(resp))
    except rospy.ServiceException as e:
        rospy.logerr(e)

if __name__ == '__main__':
    rospy.init_node("battery_level")
    rospy.wait_for_service("/set_led")
    battery_state = "full"
    while not rospy.is_shutdown():
       rospy.sleep(7)
       battery_state = "empty"
       rospy.loginfo("The battery is empty !")
       set_led(battery_state)
       rospy.sleep(3)
       battery_state = "full"
       rospy.loginfo("The battery is now full !")
       set_led(battery_state)

                            






