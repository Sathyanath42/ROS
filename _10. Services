A ROS service is a client server/system, with the following features:
1. synchronous
2. for computations and quick actions like enabling an actuator
3. one message type for request and one message type for response
4. can be written in python or c++ directly inside ros nodes
5. a service server can only exist once but can have many clients

Note the difference from topics, which is a unidirectional data stream while here it is a client server relationship with to and fro communication.

Consider the following examples, a battery in a robot needs to communicate with the led panel on it. When the battery is low is a single led of the three should light up and so on.
Now here the request to light up the LED from the battery node (3rd led light up) would be sent to the ROS service (Set LED)
The service then sents this request to the LED node. When the LED has been successfully tunred on it returns the response to the service, which sends the message Success:True to the battery node.

***********************************************Creating a python service server*************************************************

We will create a service server that takes two numbers and returns the sum of the two.
When defining the name of the service its always best to start with a verb.

touch summer_server.py
chmod +x summer_server.py
vim summer_server.py

******************************************************CODE
#!/usr/bin/env python

import rospy
from rospy_tutorials.srv import AddTwoInts

def handle_addtwoints(req):
    result = req.a + req.b
    rospy.loginfo("sum of " + str(req.a) + " and " + str(req.b) + " is " + str(result))
    return result

if __name__ == '__main__':
    rospy.init_node("summer_server")
    rospy.loginfo("summer_server node created")

    service = rospy.Service("/add_two_ints", AddTwoInts, handle_addtwoints)
    rospy.loginfo("service server has been started")
    rospy.spin()                                      


Note how we define the service with a name and the message type (AddTwoInts) and a call back (handle_addtwoints)

python summer_server.py

Output:
[INFO] [1584412037.169277]: summer_server node created
[INFO] [1584412037.172145]: service server has been started

Now we can get the list of services using
$rosservice list

We can check the service using the following :

$rosservice call /add_two_ints "a: 3
b: 5" 
sum: 8

Output:
[INFO] [1584412049.334541]: sum of 3 and 5 is 8


**************************************************Creating a Python service client**********************************************

#!/usr/bin/env python

import rospy
from rospy_tutorials.srv import AddTwoInts

if __name__ == '__main__':
    rospy.init_node("summer_client")
    
#creating a service client

    rospy.wait_for_service("/add_two_ints")
    
#this allows you to wait for the service until it is called
#if it cant catch the service it throws an exception which we catch with a try except

    try:
        add_two_ints = rospy.ServiceProxy("/add_two_ints", AddTwoInts)
        response = add_two_ints(2,8)
        rospy.loginfo("sum is " + str(response.sum))
    except rospy.ServiceException as e:
        rospy.logwarn("service failed: " + str(e))

$rosrun my_robot_tutorials summer_server.py
$rosrun my_robot_tutorials summer_client.py

output
[INFO] [1584415870.701854]: sum is 10

Note
Multiple clients will be able to call the server.
But two servers cannot be run at the same time

**************************************************Creating a C++ service server**********************************************

#include <ros/ros.h>
#include <rospy_tutorials/AddTwoInts.h>

bool handle_addtwoints(rospy_tutorials::AddTwoInts::Request &req,
                       rospy_tutorials::AddTwoInts::Response &res)

//boolean value returned here is true and false
//two parameters here, ref to a request and ref to the response 


{
    int result = req.a + req.b;
    ROS_INFO("%d + %d = %d", (int)req.a, (int)req.b, (int)result;)
// in python we had to return the response
//in C++ there is aleady a reference to the response in the parameter in the function, so we just fill the response with the data we want out as follows:
    res.sum = result;
    return true;  //to show the service call was a success
}

int main (int argc, char **argv)
{
    ros::init(argc, argv, "summer_server");
    ros::NodeHandle nh;

    ros::ServiceServer server = nh.advertiseService("/add_two_ints", handle_addtwoints);
    ros::spin();

}




